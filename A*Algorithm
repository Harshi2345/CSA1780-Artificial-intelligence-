import heapq

class Node:
    def __init__(self, position, g, h):
        self.position = position
        self.g = g  # Cost from start to current Node
        self.h = h  # Heuristic from current Node to end
        self.f = g + h  # Total cost

    def __lt__(self, other):
        return self.f < other.f

def astar(start, goal, h):
    open_list = []
    heapq.heappush(open_list, Node(start, 0, h(start, goal)))
    came_from = {}
    g_score = {start: 0}

    while open_list:
        current = heapq.heappop(open_list)

        if current.position == goal:
            path = []
            while current.position in came_from:
                path.append(current.position)
                current = came_from[current.position]
            return path[::-1]

        neighbors = [(current.position[0] + dx, current.position[1] + dy) for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]]

        for neighbor in neighbors:
            tentative_g_score = g_score[current.position] + 1
            if neighbor not in g_score or tentative_g_score < g_score[neighbor]:
                g_score[neighbor] = tentative_g_score
                f_score = tentative_g_score + h(neighbor, goal)
                heapq.heappush(open_list, Node(neighbor, tentative_g_score, f_score))
                came_from[neighbor] = current

    return None

def heuristic(pos, goal):
    return abs(pos[0] - goal[0]) + abs(pos[1] - goal[1])

start = (0, 0)
goal = (5, 5)
path = astar(start, goal, heuristic)
print("Path:", path)
